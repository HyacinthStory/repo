在windows7上安装GIT(msysgit)的过程
	-在Select Components选项中将“Git Bash here”和“Git GUI here”打对勾。
	-在“Adjusting your PATH environment”选项中，选中"Use Git Bash only"。
	-在“Configuring the line ending conversions”选项中，
		第一个选项：如果是跨平台项目，在windows系统安装，选择；
		第二个选项：如果是跨平台项目，在Unix系统安装，选择；
		第三个选项：非跨平台项目，选择。
		选中第三个
	-在Configuring the terminal emulator to use with Git Bash选项中选择"Use MinTTY"
	-在Configuring extra options选项中选择"Enable file system caching"
	-安装完成后，在目录下的鼠标右键菜单选择"Git Bash here"

在linux上安装GIT
yum -y install git


目前世界上最先进的分布式版本控制系统（没有之一）。
1、Git仓库指定用户名和Email地址
	git config --global user.name "Your Name"
	git config --global user.email "email@example.com"
2、初始化一个Git仓库
	mkdir learngit
	cd learngit
	git init
3、添加文件到Git仓库
	git add <file>  --注意，可反复多次使用，添加多个文件
	git commit -m "提交的说明" 
4、查看工作区的状态
	git status 
	git diff 
	如果git status告诉你有文件被修改过，用git diff可以查看修改内容
5、版本回退
	git reset --hard commit_id
	用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，多个上级版本HEAD~n
	git log  查看提交历史
	git reflog  查看命令历史
6、Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。
	Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，
	还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
7、管理修改
	Git跟踪并管理的是修改，而非文件
	第一次修改 -> git add -> 第二次修改 -> git add -> git commit
8、撤销修改
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库
9、删除文件
	git rm test.txt
	恢复：git checkout -- test.txt
10、修改操作系统的换行符
	Uinx/Linux采用换行符LF表示下一行（LF：LineFeed，中文意思是换行）；
	Dos和Windows采用回车+换行CRLF表示下一行（CRLF：CarriageReturn LineFeed，中文意思是回车换行）；
	Mac OS采用回车CR表示下一行（CR：CarriageReturn，中文意思是回车）。
	git config core.autocrlf boolean
		为true时，Git会将你add的所有文件视为文本问价你，将结尾的CRLF转换为LF，而checkout时会再将文件的LF格式转为CRLF格式。
		为false时，line endings不做任何改变，文本文件保持其原来的样子。
		为input时，add时Git会把CRLF转换为LF，而check时仍旧为LF，所以Windows操作系统不建议设置此值。
11、远程仓库
	分布式版本控制系统
	a、添加gitHub远程仓库
		第1步：创建SSH Key。
			ssh-keygen -t rsa -C "1208539256@qq.com"
			用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件,id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人
		第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面,点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
		第3步：创建Github远程库
		第4步：在本地库下执行：
			git remote add origin https://github.com/HyacinthStory/repo.git
		第5步：把本地库的内容推送到远程
			git push -u origin master第一次推送master分支的所有内容
			git push origin master
	b、从远程库克隆
		第1步：登陆GitHub，创建一个新的仓库，名字叫test
		第2步：克隆》》》git clone git@github.com:HyacinthStory/test.git
		Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议，ssh支持的原生git协议速度最快。		
	c、查看远程库的信息:git remote -v 
	d、推送分支：git push origin branch-name 
		本地新建的分支如果不推送到远程，对其他人就是不可见的
		从本地推送分支,如果推送失败，先用git pull抓取远程的新提交
	e、本地创建和远程分支对应的分支：git checkout -b branch-name origin/branch-name
		本地和远程分支的名称最好一致
	f、建立本地分支和远程分支的关联：git branch --set-upstream branch-name origin/branch-name
	g、从远程抓取分支：git pull  如果有冲突，要先处理冲突
12、创建、切换、合并、删除分支（Git鼓励大量使用分支）
	查看分支：git branch  （当前分支前面会标一个*号）
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
		Fast-forward:默认合并是“快进模式”,直接把master指向dev的当前提交，所以合并速度非常快，但是删除分支后，会丢掉分支信息
		--no-ff：git merge --no-ff -m "merge with no-ff" dev
	    注意：合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
	删除分支：git branch -d <name>   
13、解决冲突：
	$ git merge feature1
	冲突信息：
		Auto-merging readme.txt
		CONFLICT (content): Merge conflict in readme.txt
		Automatic merge failed; fix conflicts and then commit the result.
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
	查看分支合并图：git log --graph
14、Bug分支
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
15、Feature分支
	开发一个新feature，最好新建一个分支；
	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
16、标签：发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。
	git tag <name>：用于新建一个标签，默认为HEAD，也可以指定一个commit id；
	git tag -a <tagname> -m "blablabla..."可以指定标签信息；
	git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
	git tag：可以查看所有标签。
	git show <tagname>：查看标签信息
	git push origin <tagname>：可以推送一个本地标签；
	git push origin --tags：可以推送全部未推送过的本地标签；
	git tag -d <tagname>：可以删除一个本地标签；
	git push origin :refs/tags/<tagname>：可以删除一个远程标签
17、忽略特殊文件
	1、忽略文件的原则是：
		a、忽略操作系统自动生成的文件，比如缩略图等；
		b、忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
		c、忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
	2、忽略某些文件时，需要编写.gitignore，
	.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
18、配置别名：
	给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。
	配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
	Git配置文件都放在.git/config文件中，cat .git/config 
	git config --global alias.st status
19、搭建Git服务器
20、资源库：
https://pan.baidu.com/s/1kU5OCOB#list/path=%2F&parentPath=%2F